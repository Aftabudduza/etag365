//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TagService.BO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TagEntities : DbContext
    {
        public TagEntities()
            : base("name=TagEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillingPayment> BillingPayment { get; set; }
        public virtual DbSet<CalendarEntry> CalendarEntry { get; set; }
        public virtual DbSet<CalendarSchedule> CalendarSchedule { get; set; }
        public virtual DbSet<Child> Child { get; set; }
        public virtual DbSet<ContactInformation> ContactInformation { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Dealer_SalesPartner> Dealer_SalesPartner { get; set; }
        public virtual DbSet<Dealer_SalesPartner_DetailsZipCodeCoverage> Dealer_SalesPartner_DetailsZipCodeCoverage { get; set; }
        public virtual DbSet<EmailLog> EmailLog { get; set; }
        public virtual DbSet<EmailSchedule> EmailSchedule { get; set; }
        public virtual DbSet<EmailSetup> EmailSetup { get; set; }
        public virtual DbSet<EmailUnsubscribe> EmailUnsubscribe { get; set; }
        public virtual DbSet<FinancialTransaction> FinancialTransaction { get; set; }
        public virtual DbSet<GroupCode> GroupCode { get; set; }
        public virtual DbSet<ImportContact> ImportContact { get; set; }
        public virtual DbSet<Master> Master { get; set; }
        public virtual DbSet<PaymentHistory> PaymentHistory { get; set; }
        public virtual DbSet<PaymentInformation> PaymentInformation { get; set; }
        public virtual DbSet<ReferralAccount> ReferralAccount { get; set; }
        public virtual DbSet<ReferralTransaction> ReferralTransaction { get; set; }
        public virtual DbSet<States> States { get; set; }
        public virtual DbSet<SystemInformation> SystemInformation { get; set; }
        public virtual DbSet<UserLog_Data> UserLog_Data { get; set; }
        public virtual DbSet<UserPricing> UserPricing { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
        public virtual DbSet<Version> Version { get; set; }
        public virtual DbSet<GlobalID> GlobalID { get; set; }
    
        public virtual int SP_GetID(string objectID, string itemID, Nullable<int> iDForYear, Nullable<int> iDForMonth, Nullable<System.DateTime> iDForDate, ObjectParameter newID)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var iDForYearParameter = iDForYear.HasValue ?
                new ObjectParameter("IDForYear", iDForYear) :
                new ObjectParameter("IDForYear", typeof(int));
    
            var iDForMonthParameter = iDForMonth.HasValue ?
                new ObjectParameter("IDForMonth", iDForMonth) :
                new ObjectParameter("IDForMonth", typeof(int));
    
            var iDForDateParameter = iDForDate.HasValue ?
                new ObjectParameter("IDForDate", iDForDate) :
                new ObjectParameter("IDForDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetID", objectIDParameter, itemIDParameter, iDForYearParameter, iDForMonthParameter, iDForDateParameter, newID);
        }
    
        public virtual int usp_Calculate_Commission_Dealer_Monthly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Calculate_Commission_Dealer_Monthly");
        }
    
        public virtual int usp_Calculate_Commission_User_Monthly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Calculate_Commission_User_Monthly");
        }
    
        public virtual ObjectResult<usp_GetCommissionAmount_All_DateWise_Result> usp_GetCommissionAmount_All_DateWise(string startDate, string endDate, string getterPhoneNo, string commissionFor)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var getterPhoneNoParameter = getterPhoneNo != null ?
                new ObjectParameter("GetterPhoneNo", getterPhoneNo) :
                new ObjectParameter("GetterPhoneNo", typeof(string));
    
            var commissionForParameter = commissionFor != null ?
                new ObjectParameter("commissionFor", commissionFor) :
                new ObjectParameter("commissionFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommissionAmount_All_DateWise_Result>("usp_GetCommissionAmount_All_DateWise", startDateParameter, endDateParameter, getterPhoneNoParameter, commissionForParameter);
        }
    
        public virtual ObjectResult<usp_GetCommissionByUserType_Result> usp_GetCommissionByUserType(string phoneNo, string commissionFor)
        {
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var commissionForParameter = commissionFor != null ?
                new ObjectParameter("commissionFor", commissionFor) :
                new ObjectParameter("commissionFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommissionByUserType_Result>("usp_GetCommissionByUserType", phoneNoParameter, commissionForParameter);
        }
    
        public virtual ObjectResult<usp_GetCommissionDetailsByUserType_Result> usp_GetCommissionDetailsByUserType(string commissionFor, string month, Nullable<int> year, Nullable<bool> ispaid, string phoneNo)
        {
            var commissionForParameter = commissionFor != null ?
                new ObjectParameter("commissionFor", commissionFor) :
                new ObjectParameter("commissionFor", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var ispaidParameter = ispaid.HasValue ?
                new ObjectParameter("Ispaid", ispaid) :
                new ObjectParameter("Ispaid", typeof(bool));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommissionDetailsByUserType_Result>("usp_GetCommissionDetailsByUserType", commissionForParameter, monthParameter, yearParameter, ispaidParameter, phoneNoParameter);
        }
    
        public virtual ObjectResult<usp_GetCommissionDetailsForDealer_Result> usp_GetCommissionDetailsForDealer(string month, Nullable<int> year, Nullable<bool> ispaid, Nullable<int> id)
        {
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var ispaidParameter = ispaid.HasValue ?
                new ObjectParameter("Ispaid", ispaid) :
                new ObjectParameter("Ispaid", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommissionDetailsForDealer_Result>("usp_GetCommissionDetailsForDealer", monthParameter, yearParameter, ispaidParameter, idParameter);
        }
    
        public virtual ObjectResult<usp_GetCommissionForDealerChange_Result> usp_GetCommissionForDealerChange(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommissionForDealerChange_Result>("usp_GetCommissionForDealerChange", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getContactStorageBalance(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getContactStorageBalance", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getCurrentMonthContactImport(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getCurrentMonthContactImport", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getCurrentYearContactExport(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getCurrentYearContactExport", userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetDelarInfoByPhoneNo_Result> usp_GetDelarInfoByPhoneNo(string phoneNo)
        {
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDelarInfoByPhoneNo_Result>("usp_GetDelarInfoByPhoneNo", phoneNoParameter);
        }
    
        public virtual ObjectResult<usp_GetDueCommissionByUser_Result> usp_GetDueCommissionByUser(string phoneNo, string commissionFor)
        {
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var commissionForParameter = commissionFor != null ?
                new ObjectParameter("commissionFor", commissionFor) :
                new ObjectParameter("commissionFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDueCommissionByUser_Result>("usp_GetDueCommissionByUser", phoneNoParameter, commissionForParameter);
        }
    
        public virtual ObjectResult<usp_GetGroupCodeByUserType_Result> usp_GetGroupCodeByUserType(string groupCodeFor, string phoneNo)
        {
            var groupCodeForParameter = groupCodeFor != null ?
                new ObjectParameter("GroupCodeFor", groupCodeFor) :
                new ObjectParameter("GroupCodeFor", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGroupCodeByUserType_Result>("usp_GetGroupCodeByUserType", groupCodeForParameter, phoneNoParameter);
        }
    
        public virtual ObjectResult<usp_getPhoneNoByAutoComplete_Result> usp_getPhoneNoByAutoComplete(string autocompleteText, string groupCodeFor)
        {
            var autocompleteTextParameter = autocompleteText != null ?
                new ObjectParameter("autocompleteText", autocompleteText) :
                new ObjectParameter("autocompleteText", typeof(string));
    
            var groupCodeForParameter = groupCodeFor != null ?
                new ObjectParameter("GroupCodeFor", groupCodeFor) :
                new ObjectParameter("GroupCodeFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getPhoneNoByAutoComplete_Result>("usp_getPhoneNoByAutoComplete", autocompleteTextParameter, groupCodeForParameter);
        }
    
        public virtual ObjectResult<usp_GetUserInfoByDealer_Result> usp_GetUserInfoByDealer(string phoneNo)
        {
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserInfoByDealer_Result>("usp_GetUserInfoByDealer", phoneNoParameter);
        }
    
        public virtual int usp_ImportToContact(string createdBy, string typeOfContact, string balance, ObjectParameter mass, ObjectParameter error)
        {
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            var typeOfContactParameter = typeOfContact != null ?
                new ObjectParameter("TypeOfContact", typeOfContact) :
                new ObjectParameter("TypeOfContact", typeof(string));
    
            var balanceParameter = balance != null ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ImportToContact", createdByParameter, typeOfContactParameter, balanceParameter, mass, error);
        }
    
        public virtual int usp_UpdateUserProfileEmailAndPassword(string password, string email, string mobileNo)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserProfileEmailAndPassword", passwordParameter, emailParameter, mobileNoParameter);
        }
    
        public virtual int usp_UpdateUserProfileForExportData(string createdBy, Nullable<int> noOfExport)
        {
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            var noOfExportParameter = noOfExport.HasValue ?
                new ObjectParameter("NoOfExport", noOfExport) :
                new ObjectParameter("NoOfExport", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserProfileForExportData", createdByParameter, noOfExportParameter);
        }
    }
}
